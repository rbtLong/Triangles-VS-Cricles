<<<<<<< local
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Forms.VisualStyles;
using System.Windows.Input;
using TrianglesVCircles.Annotations;
using TrianglesVCircles.Core.Animation.RandomMovements;
using TrianglesVCircles.Core.Animation.RandomMovements.MoveStrategies;
using TrianglesVCircles.Core.Projectiles.Attacks;
using TrianglesVCircles.Helpers;

namespace TrianglesVCircles.Core.Creeps
{
    public abstract class BaseEnemy : INotifyPropertyChanged, 
        IRandomMovable, IAttackable, IDisposable
    {
        private List<string> _life;
        private bool _enabled;
        private double _xPosition;
        private double _yPosition;
        private string _caption;
        private bool _isAlive = true;
        private double _width = Dimensions.EnemyWidth;
        private double _height = Dimensions.EnemyHeight;
        private bool _invulnerable;
        private RandomDestination _randomMove;
        private RandomMover _randomMover;
        private bool _attackable = true;
        private IAttackable _target;
        private BaseAttack _attack;
        private IMoveStrategy _moveStrategy;

        public event EventHandler Died = delegate { };

        public abstract int InitializeDamage();

        public IAttackable Target
        {
            get { return _target; }
            set
            {
                if (Equals(value, _target)) return;
                _target = value;
                OnPropertyChanged();
            }
        }

        protected abstract BaseAttack InitializeAttack();

        public IMoveStrategy MoveStrategy
        {
            get { return _moveStrategy; }
            set
            {
                if (Equals(value, _moveStrategy)) return;
                _moveStrategy = value;
                OnPropertyChanged();
            }
        }

        public BaseAttack Attack
        {
            get { return _attack; }
            set
            {
                if (Equals(value, _attack)) return;
                _attack = value;
                OnPropertyChanged();
            }
        }

        public Rect HitBox
        {
            get
            {
                return new Rect(
                    XPosition, YPosition, 
                    Math.Abs(XPosition + Width), 
                    Math.Abs(YPosition+Height));
            }
        }

        public RandomMover RandomMover
        {
            get { return _randomMover; }
            protected set
            {
                if (Equals(value, _randomMover)) return;
                _randomMover = value;
                OnPropertyChanged();
            }
        }

        public virtual RandomDestination RandomMove
        {
            get { return _randomMove; }
            set
            {
                if (Equals(value, _randomMove)) return;
                _randomMove = value;
                OnPropertyChanged();
            }
        }

        public double Height
        {
            get { return _height; }
            set
            {
                if (value.Equals(_height)) return;
                _height = value;
                OnPropertyChanged();
                OnPropertyChanged("HitBox");
            }
        }

        public double Width
        {
            get { return _width; }
            set
            {
                if (value.Equals(_width)) return;
                _width = value;
                OnPropertyChanged();
                OnPropertyChanged("HitBox");
                OnPropertyChanged("Center");
            }
        }

        public bool IsAlive
        {
            get { return _isAlive; }
            set
            {
                if (value.Equals(_isAlive)) return;
                _isAlive = value;
                if (!_isAlive)
                    Attack.Stop();
                OnPropertyChanged();
            }
        }

        public bool Invulnerable
        {
            get { return _invulnerable; }
            set
            {
                if (value.Equals(_invulnerable)) return;
                _invulnerable = value;
                OnPropertyChanged();
            }
        }

        public string Caption
        {
            get { return _caption; }
            set
            {
                if (value == _caption) return;
                _caption = value;
                OnPropertyChanged();
            }
        }

        public double XPosition
        {
            get { return _xPosition; }
            set
            {
                if (value.Equals(_xPosition)) return;
                _xPosition = value;
                OnPropertyChanged();
                OnPropertyChanged("HitBox");
                OnPropertyChanged("Center");
            }
        }

        public double YPosition
        {
            get { return _yPosition; }
            set
            {
                if (value.Equals(_yPosition)) return;
                _yPosition = value;
                OnPropertyChanged();
                OnPropertyChanged("HitBox");
                OnPropertyChanged("Center");
            }
        }

        public Point Center
        {
            get
            {
                return new Point(
                    XPosition + (Width/2), 
                    YPosition + (Height/2));
            }
        }

        public List<string> Life
        {
            get { return _life; }
            set
            {
                if (Equals(value, _life)) return;
                _life = value;
                OnPropertyChanged();
            }
        }

        public bool Enabled
        {
            get { return _enabled; }
            set
            {
                if (value.Equals(_enabled)) return;
                _enabled = value;
                OnPropertyChanged();
            }
        }

        protected BaseEnemy(IAttackable target, IMoveStrategy moveStrategy)
        {
            _target = target;
            _life = new List<string>();
            _moveStrategy = moveStrategy;
            init();
        }


        protected BaseEnemy(char life, IAttackable target,
            IMoveStrategy moveStrategy)
        {
            _target = target;
            _life = new List<string>();
            _life.Add(life.ToString());
            _moveStrategy = moveStrategy;
            init();

        }


        protected BaseEnemy(IEnumerable<string> life,
            IAttackable target, IMoveStrategy moveStrategy)
        {
            _target = target;
            _life = new List<string>(life);
            _moveStrategy = moveStrategy;    
            init();
        }

            private void init()
            {
                _attack = InitializeAttack();
                _randomMove = new RandomDestination(
                    new Point(_xPosition, _yPosition),
                    new Rect(new Point(Width/2, Height/2),
                        new Point(
                            Dimensions.StageWidth - 30,
                            Dimensions.StageHeight*(2/3.0))),
                    _moveStrategy);
                _randomMover = new RandomMover(this);
                if (_life.Any()) Caption = _life.FirstOrDefault();
                setInitialPos();
                _attack.Damage = InitializeDamage();
            }

        private void checkIsAlive()
        {
            if (_life.Count == 0)
            {
                IsAlive = false;
                Died(this, null);
            }
        }

        public void RemoveLife()
        {
            if(Life.Any())
                Life.RemoveAt(0);
            checkIsAlive();
        }

        protected virtual void setInitialPos()
        {
            XPosition = GlobalRandom.Next(0, (int)Dimensions.StageWidth-20);
            YPosition = GlobalRandom.Next(0, 300);
        }

        public bool Attackable
        {
            get { return _attackable; }
            set
            {
                if (value.Equals(_attackable)) return;
                _attackable = value;
                OnPropertyChanged();
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        [NotifyPropertyChangedInvocator]
        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null) handler(this, new PropertyChangedEventArgs(propertyName));
        }

        public virtual void Dispose()
        {
            _attack.Dispose();
        }
    }
}
=======
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Forms.VisualStyles;
using System.Windows.Input;
using TrianglesVCircles.Annotations;
using TrianglesVCircles.Core.Animation.RandomMovements;
using TrianglesVCircles.Core.Animation.RandomMovements.MoveStrategies;
using TrianglesVCircles.Core.Projectiles.Attacks;
using TrianglesVCircles.Helpers;

namespace TrianglesVCircles.Core.Creeps
{
    public abstract class BaseEnemy : INotifyPropertyChanged, 
        IRandomMovable, IAttackable, IDisposable
    {
        private List<string> _life;
        private bool _enabled;
        private double _xPosition;
        private double _yPosition;
        private string _caption;
        private bool _isAlive = true;
        private double _width = Dimensions.EnemyWidth;
        private double _height = Dimensions.EnemyHeight;
        private bool _invulnerable;
        private RandomDestination _randomMove;
        private RandomMover _randomMover;
        private bool _attackable = true;
        private IAttackable _target;
        private BaseAttack _attack;
        private IMoveStrategy _moveStrategy;

        public event EventHandler Died = delegate { };

        public abstract int InitializeDamage();

        public IAttackable Target
        {
            get { return _target; }
            set
            {
                if (Equals(value, _target)) return;
                _target = value;
                OnPropertyChanged();
            }
        }

        protected abstract BaseAttack InitializeAttack();

        public IMoveStrategy MoveStrategy
        {
            get { return _moveStrategy; }
            set
            {
                if (Equals(value, _moveStrategy)) return;
                _moveStrategy = value;
                OnPropertyChanged();
            }
        }

        public BaseAttack Attack
        {
            get { return _attack; }
            set
            {
                if (Equals(value, _attack)) return;
                _attack = value;
                OnPropertyChanged();
            }
        }

        public Rect HitBox
        {
            get
            {
                return new Rect(
                    XPosition, YPosition, 
                    XPosition + Width, YPosition+Height);
            }
        }

        public RandomMover RandomMover
        {
            get { return _randomMover; }
            protected set
            {
                if (Equals(value, _randomMover)) return;
                _randomMover = value;
                OnPropertyChanged();
            }
        }

        public virtual RandomDestination RandomMove
        {
            get { return _randomMove; }
            set
            {
                if (Equals(value, _randomMove)) return;
                _randomMove = value;
                OnPropertyChanged();
            }
        }

        public double Height
        {
            get { return _height; }
            set
            {
                if (value.Equals(_height)) return;
                _height = value;
                OnPropertyChanged();
                OnPropertyChanged("HitBox");
            }
        }

        public double Width
        {
            get { return _width; }
            set
            {
                if (value.Equals(_width)) return;
                _width = value;
                OnPropertyChanged();
                OnPropertyChanged("HitBox");
                OnPropertyChanged("Center");
            }
        }

        public bool IsAlive
        {
            get { return _isAlive; }
            set
            {
                if (value.Equals(_isAlive)) return;
                _isAlive = value;
                if (!_isAlive)
                    Attack.Stop();
                OnPropertyChanged();
            }
        }

        public bool Invulnerable
        {
            get { return _invulnerable; }
            set
            {
                if (value.Equals(_invulnerable)) return;
                _invulnerable = value;
                OnPropertyChanged();
            }
        }

        public string Caption
        {
            get { return _caption; }
            set
            {
                if (value == _caption) return;
                _caption = value;
                OnPropertyChanged();
            }
        }

        public double XPosition
        {
            get { return _xPosition; }
            set
            {
                if (value.Equals(_xPosition)) return;
                _xPosition = value;
                OnPropertyChanged();
                OnPropertyChanged("HitBox");
                OnPropertyChanged("Center");
            }
        }

        public double YPosition
        {
            get { return _yPosition; }
            set
            {
                if (value.Equals(_yPosition)) return;
                _yPosition = value;
                OnPropertyChanged();
                OnPropertyChanged("HitBox");
                OnPropertyChanged("Center");
            }
        }

        public Point Center
        {
            get
            {
                return new Point(
                    XPosition + (Width/2), 
                    YPosition + (Height/2));
            }
        }

        public List<string> Life
        {
            get { return _life; }
            set
            {
                if (Equals(value, _life)) return;
                _life = value;
                OnPropertyChanged();
            }
        }

        public bool Enabled
        {
            get { return _enabled; }
            set
            {
                if (value.Equals(_enabled)) return;
                _enabled = value;
                OnPropertyChanged();
            }
        }

        protected BaseEnemy(IAttackable target, IMoveStrategy moveStrategy)
        {
            _target = target;
            _life = new List<string>();
            _moveStrategy = moveStrategy;
            init();
        }


        protected BaseEnemy(char life, IAttackable target,
            IMoveStrategy moveStrategy)
        {
            _target = target;
            _life = new List<string>();
            _life.Add(life.ToString());
            _moveStrategy = moveStrategy;
            init();

        }


        protected BaseEnemy(IEnumerable<string> life,
            IAttackable target, IMoveStrategy moveStrategy)
        {
            _target = target;
            _life = new List<string>(life);
            _moveStrategy = moveStrategy;    
            init();
        }   

            private void init()
            {
                _attack = InitializeAttack();
                _randomMove = new RandomDestination(
                    new Point(_xPosition, _yPosition),
                    new Rect(new Point(Width/2, Height/2),
                        new Point(
                            Dimensions.StageWidth - 30,
                            Dimensions.StageHeight*(2/3.0))),
                    _moveStrategy);
                _randomMover = new RandomMover(this);
                if (_life.Any()) Caption = _life.FirstOrDefault();
                setInitialPos();
                _attack.Damage = InitializeDamage();
            }

        private void checkIsAlive()
        {
            if (_life.Count == 0)
            {
                IsAlive = false;
                Died(this, null);
            }
        }

        public void RemoveLife()
        {
            if(Life.Any())
                Life.RemoveAt(0);
            checkIsAlive();
        }

        protected virtual void setInitialPos()
        {
            XPosition = GlobalRandom.Next(0, (int)Dimensions.StageWidth-20);
            YPosition = GlobalRandom.Next(0, 300);
        }

        public bool Attackable
        {
            get { return _attackable; }
            set
            {
                if (value.Equals(_attackable)) return;
                _attackable = value;
                OnPropertyChanged();
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        [NotifyPropertyChangedInvocator]
        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null) handler(this, new PropertyChangedEventArgs(propertyName));
        }

        public void Dispose()
        {
            _attack.Dispose();
        }
    }
}
>>>>>>> other
